@using BlazorFocused.Store
@using ToDo.Client.Actions
@using ToDo.Client.Stores
@using Model = ToDo.Shared

@inject IStore<ToDoStore> toDoStore

<h5>Complete</h5>

<table cellpadding="10">
    <thead>
        <tr>
            <th>Item</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var toDo in completeToDoList)
        {
            <tr>
                <td>@toDo.Title</td>
                <td>
                    <button class="btn btn-sm btn-primary btn-block" 
                            type="submit"
                            @onclick="@(e => RestoreActionAsync(toDo))">
                        Restore
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    IEnumerable<Model.ToDo> completeToDoList;

    protected override void OnInitialized()
    {
        toDoStore.Subscribe(store =>
        {
            completeToDoList = store.Complete;

            StateHasChanged();
        });
    }

    private async Task RestoreActionAsync(Model.ToDo toDo)
    {
        await toDoStore.DispatchAsync<RestoreToDoAction, Model.ToDo>(toDo);
    }
}

